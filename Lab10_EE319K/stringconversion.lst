


ARM Macro Assembler    Page 1 


    1 00000000         ; StringConversion.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; EE319K lab 7 number to string conversions
    6 00000000         ;
    7 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
    8 00000000         
    9 00000000                 EXPORT           Dec2String
   10 00000000                 EXPORT           Fix2String
   11 00000000         
   12 00000000         
   13 00000000         
   14 00000000         
   15 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   16 00000000                 THUMB
   17 00000000                 PRESERVE8
   18 00000000         
   19 00000000         
   20 00000000         ;-----------------------Dec2String----------------------
                       -
   21 00000000         ; Convert a 32-bit number into unsigned decimal format
   22 00000000         ; String the string into the empty array add null-termin
                       ation
   23 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   24 00000000         ;        R1 pointer to empty array
   25 00000000         ; Output: none
   26 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   27 00000000         Dec2String
   28 00000000 00000000 
                       x       EQU              0           ;local variable
   29 00000000 E92D 4FF0       PUSH             {R4-R11,LR}
   30 00000004         ;SUBS SP, #8     
   31 00000004         
   32 00000004 F04F 0400       MOV              R4, #0
   33 00000008 B411            PUSH             {R0,R4}     ;Allocation
   34 0000000A 46EB            MOV              R11, SP
   35 0000000C         
   36 0000000C 2800            CMP              R0, #0      ; input == 0?
   37 0000000E D101            BNE              Stack_Access
   38 00000010 B401            PUSH             {R0}
   39 00000012 E013            B                Display
   40 00000014         
   41 00000014         Stack_Access
   42 00000014 F8DB 4000       LDR              R4, [R11,#x]
   43 00000018 2C00            CMP              R4, #0      ; done? (data = 0)?
                                                            
   44 0000001A D00F            BEQ              Display
   45 0000001C F04F 050A       MOV              R5, #10
   46 00000020 FBB4 F5F5       UDIV             R5, R4, R5  ; x = num/10
   47 00000024 F8CB 5000       STR              R5, [R11,#x] ; store R5 into da
                                                            ta offset
   48 00000028         
   49 00000028 F04F 060A       MOV              R6, #10



ARM Macro Assembler    Page 2 


   50 0000002C FB05 F506       MUL              R5, R6
   51 00000030 EBA4 0405       SUB              R4,R4,R5
   52 00000034         ;MLS R4, R4, R5, R6   ; mult and modulo
   53 00000034 B410            PUSH             {R4}        ; push remainder on
                                                             stack
   54 00000036         
   55 00000036 E7ED            B                Stack_Access
   56 00000038 F101 0101 
                       loop    ADD              R1, R1, #1  ;if not done poppin
                                                            g go back here and 
                                                            increment pointer
   57 0000003C         Display
   58 0000003C BC01            POP              {R0}
   59 0000003E F100 0030       ADD              R0, #0x30   ; convert to ASCII
   60 00000042 6008            STR              R0, [R1]
   61 00000044 45DD            CMP              SP, R11
   62 00000046 D1F7            BNE              loop
   63 00000048 B002            ADD              SP, #8      ; DeAllocation
   64 0000004A         
   65 0000004A E8BD 4FF0       POP              {R4-R11,LR}
   66 0000004E         
   67 0000004E 4770            BX               LR
   68 00000050         
   69 00000050         
   70 00000050         
   71 00000050         ;* * * * * * * * End of Dec2String * * * * * * * *
   72 00000050         
   73 00000050         
   74 00000050         ; -----------------------Fix2String---------------------
                       -
   75 00000050         ; Create characters for LCD display in fixed-point forma
                       t
   76 00000050         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   77 00000050         ; Inputs:  R0 is an unsigned 32-bit number
   78 00000050         ;          R1 pointer to empty array
   79 00000050         ; Outputs: none
   80 00000050         ; E.g., R0=0,    then create "0.000 "
   81 00000050         ;       R0=3,    then create "0.003"
   82 00000050         ;       R0=89,   then create "0.089"
   83 00000050         ;       R0=123,  then create "0.123"
   84 00000050         ;       R0=9999, then create "9.999"
   85 00000050         ;       R0>9999, then create "*.***"
   86 00000050         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   87 00000050         Fix2String
   88 00000050 00000000 
                       y       EQU              0           ;local variable
   89 00000050         ; allocate space
   90 00000050 E92D 4FF0       PUSH             { R4-R11, LR}
   91 00000054         
   92 00000054 F04F 0400       MOV              R4, #0
   93 00000058 B411            PUSH             {R0,R4}     ; push R0 and zero
   94 0000005A 46EB            MOV              R11, SP     ; set r11 to pointe
                                                            r
   95 0000005C         
   96 0000005C F8DB 4000       LDR              R4, [R11, #y]
   97 00000060 F44F 757A       MOV              R5, #1000
   98 00000064 FBB4 F4F5       UDIV             R4,R5       ; input/1000 



ARM Macro Assembler    Page 3 


   99 00000068 2C09            CMP              R4, #9      ; check for overflo
                                                            w
  100 0000006A D84C            BHI              Asterisk
  101 0000006C         
  102 0000006C F104 0430       ADD              R4, #0x30
  103 00000070 4620            MOV              R0, R4
  104 00000072 6008            STR              R0, [R1]    ; display ones plac
                                                            e value
  105 00000074         
  106 00000074 F8DB 4000       LDR              R4, [R11, #y]
  107 00000078 F44F 767A       MOV              R6, #1000
  108 0000007C FBB4 F5F6       UDIV             R5, R4, R6
  109 00000080 FB05 F506       MUL              R5, R6
  110 00000084 EBA4 0405       SUB              R4,R4,R5    ; calculate data%10
                                                            00
  111 00000088 F8CB 4000       STR              R4, [R11, #y] ; store remainder
                                                             in y
  112 0000008C         
  113 0000008C F04F 002E       MOV              R0, #0x2E   ; display decimal p
                                                            oint
  114 00000090 F8C1 0001       STR              R0, [R1, #1] ;#1
  115 00000094         
  116 00000094 F8DB 4000       LDR              R4, [R11, #y]
  117 00000098 F04F 0664       MOV              R6, #100    ; data/100
  118 0000009C FBB4 F4F6       UDIV             R4,R6
  119 000000A0 F104 0430       ADD              R4, #0x30
  120 000000A4 4620            MOV              R0, R4
  121 000000A6 F8C1 0002       STR              R0, [R1, #2] ;#2 ; display tent
                                                            hs place value
  122 000000AA         
  123 000000AA F8DB 4000       LDR              R4, [R11, #y]
  124 000000AE F04F 0664       MOV              R6, #100
  125 000000B2 FBB4 F5F6       UDIV             R5, R4, R6
  126 000000B6 FB05 F506       MUL              R5, R6
  127 000000BA EBA4 0405       SUB              R4,R4,R5    ; calculate data%10
                                                            0
  128 000000BE F8CB 4000       STR              R4, [R11, #y] 
                                                            ; store remainder 
  129 000000C2         
  130 000000C2 F8DB 4000       LDR              R4, [R11, #y] ;divides input by
                                                             10
  131 000000C6 F04F 060A       MOV              R6, #10
  132 000000CA FBB4 F4F6       UDIV             R4,R6
  133 000000CE F104 0430       ADD              R4, #0x30
  134 000000D2 4620            MOV              R0, R4
  135 000000D4 F8C1 0003       STR              R0, [R1, #3] ;#3  
  136 000000D8         
  137 000000D8 F8DB 4000       LDR              R4, [R11, #y]
  138 000000DC F04F 060A       MOV              R6, #10
  139 000000E0 FBB4 F5F6       UDIV             R5, R4, R6
  140 000000E4 FB05 F506       MUL              R5, R6
  141 000000E8 EBA4 0405       SUB              R4,R4,R5    ; modulo
  142 000000EC F8CB 4000       STR              R4, [R11, #y]
  143 000000F0         
  144 000000F0 F8DB 4000       LDR              R4, [R11, #y]
  145 000000F4 F104 0430       ADD              R4, #0x30   ; convert to ASCII
  146 000000F8 4620            MOV              R0, R4
  147 000000FA 6048            STR              R0, [R1, #4]
  148 000000FC         



ARM Macro Assembler    Page 4 


  149 000000FC F04F 0020       MOV              R0, #0x20
  150 00000100 F8C1 0005       STR              R0, [R1, #5]
  151 00000104 E011            B                finish
  152 00000106         
  153 00000106         Asterisk
  154 00000106 F04F 002A       MOV              R0, #0x2A
  155 0000010A 6008            STR              R0, [R1]    ; *
  156 0000010C F04F 002E       MOV              R0, #0x2E
  157 00000110 F8C1 0001       STR              R0, [R1, #1] ; .
  158 00000114 F04F 002A       MOV              R0, #0x2A
  159 00000118 F8C1 0002       STR              R0, [R1, #2] ; *
  160 0000011C F04F 002A       MOV              R0, #0x2A
  161 00000120 F8C1 0003       STR              R0, [R1, #3] ; *
  162 00000124 F04F 002A       MOV              R0, #0x2A
  163 00000128 6048            STR              R0, [R1, #4] ; *
  164 0000012A         
  165 0000012A         
  166 0000012A         
  167 0000012A         finish
  168 0000012A B002            ADD              SP, #8      ; de allocate space
                                                            
  169 0000012C E8BD 4FF0       POP              {R4-R11, LR} 
                                                            ; restore registers
                                                            
  170 00000130 4770            BX               LR
  171 00000132         
  172 00000132         
  173 00000132         
  174 00000132         
  175 00000132         
  176 00000132         
  177 00000132         
  178 00000132 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  179 00000134                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\stringconversion.d -o.\stringconversion.o -I.\RTE\_SpaceInvaders
 -IC:\Users\luigi\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -I
C:\Users\luigi\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C1
23 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 534" --prede
fine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1
" --list=.\stringconversion.lst ..\inc\StringConversion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 15 in file ..\inc\StringConversion.s
   Uses
      None
Comment: .text unused
Asterisk 00000106

Symbol: Asterisk
   Definitions
      At line 153 in file ..\inc\StringConversion.s
   Uses
      At line 100 in file ..\inc\StringConversion.s
Comment: Asterisk used once
Dec2String 00000000

Symbol: Dec2String
   Definitions
      At line 27 in file ..\inc\StringConversion.s
   Uses
      At line 9 in file ..\inc\StringConversion.s
Comment: Dec2String used once
Display 0000003C

Symbol: Display
   Definitions
      At line 57 in file ..\inc\StringConversion.s
   Uses
      At line 39 in file ..\inc\StringConversion.s
      At line 44 in file ..\inc\StringConversion.s

Fix2String 00000050

Symbol: Fix2String
   Definitions
      At line 87 in file ..\inc\StringConversion.s
   Uses
      At line 10 in file ..\inc\StringConversion.s
Comment: Fix2String used once
Stack_Access 00000014

Symbol: Stack_Access
   Definitions
      At line 41 in file ..\inc\StringConversion.s
   Uses
      At line 37 in file ..\inc\StringConversion.s
      At line 55 in file ..\inc\StringConversion.s

finish 0000012A

Symbol: finish
   Definitions
      At line 167 in file ..\inc\StringConversion.s
   Uses
      At line 151 in file ..\inc\StringConversion.s
Comment: finish used once
loop 00000038



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: loop
   Definitions
      At line 56 in file ..\inc\StringConversion.s
   Uses
      At line 62 in file ..\inc\StringConversion.s
Comment: loop used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

x 00000000

Symbol: x
   Definitions
      At line 28 in file ..\inc\StringConversion.s
   Uses
      At line 42 in file ..\inc\StringConversion.s
      At line 47 in file ..\inc\StringConversion.s

y 00000000

Symbol: y
   Definitions
      At line 88 in file ..\inc\StringConversion.s
   Uses
      At line 96 in file ..\inc\StringConversion.s
      At line 106 in file ..\inc\StringConversion.s
      At line 111 in file ..\inc\StringConversion.s
      At line 116 in file ..\inc\StringConversion.s
      At line 123 in file ..\inc\StringConversion.s
      At line 128 in file ..\inc\StringConversion.s
      At line 130 in file ..\inc\StringConversion.s
      At line 137 in file ..\inc\StringConversion.s
      At line 142 in file ..\inc\StringConversion.s
      At line 144 in file ..\inc\StringConversion.s

2 symbols
344 symbols in table
